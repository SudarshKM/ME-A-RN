MODULE - II - JAVASCRIPT
------------------------

===>>> Procedural programming 
-----------------------------
-> its a programming paradigm where series of computational steps are carried out
-> unlike OOPS, where data and methods were tied together(encapsulated) into class and object, procedural programming uses data and functions as two 	different entities.

-----------------------------------------------------------------------------------------------------------------------------------------------------
JAVASCRIPT
==========
- Javascript can be used in both frontend as well as backend
- Frontend - Behaviour
- Backend -Logical operation

- Single thread programming language - LIne by line execution

- Javascript is a dynamically typed languages(data type changes)

-Node.js - open source javascript runtime environment that execute javascript code out side a web browser.

-extension - filename.js

Display
-------
console.log(content);
console.log('content',variable);

Datatypes
=========

-Premitive data types
---------------------
1)String
2)Number
3)Boolean - (True or false)
4)bigInt - Numbers Larger than 2**53 and numbers less than -2**53
5)Undefined - Variables declared but values are not assigned.(eg: let X) ==> No value assigned to X
6)Null - ( let x = null )
7)Symbol - Unique identifier

-Non premitive data types
-------------------------
--> Combination of primitive datatypes

8)Object - Values are stored as key: value pair

Variables
---------
-Used to store data

Identifier
----------
-Rules to create variables
1)It can be started with alphabets, dollar symbol (or) underscore
2)First character can be followed by alphabets, dollar symbol, underscore & digits
3) Digits cannot be placed as the first character
4) Can use more than one words, but the words should not have space
	-second word can start with Capital letter(camel case)
	-use underscore to seperate the words

Syntax
------
variable_name = value

keyword variable_name = value

keyword:-
--------
- Reserved words are called keywords which gives a special meaning to the values

1) const - Reassigning is not possible - Hoisting is not possible
2) var - Reassigning possible - Hoisting is possible
3) let -  Reassigning is possible - block level --> { } - Hoisting is not possible

variable hoisting - Using a variable before it is declared

4)Concatination - Adding two datatypes
---------------
string + string = string
number + number = number
string + number = string

5)Template Literals
-------------------
Another way of displaying content
`content ${variable_name}`

6)Operators
---------
1)Assignment operator ->  =

2)Arithematic operators ->  + , - , * , / , ** (exponential - power) , % (modules - remainder)

3)Relational operator - >   > , >= , < , <= , == , ===      (Boolean Values)
	== value(left value is same as right value) eg: 10 == '10'   - True
	=== value datatype eg: 10 === '10'   - False

4)Logical operator -> 
 ----------------- 	
	i)   AND (&&)
	-------------
	T && T = T
	T && F = F
	F && T = F
	F && F = F

	ii)  OR (||)
	------------
	T || T = T
	T || F = T
	F || T = T
	F || F = F

	iii) NOT (!)
	------------
	!T = F
	!F = T


5) Increment(++) and Decrement(--) operators
--------------------------------------------
- Position is important.

6)Shorthand operator
--------------------
x = x+y 
can be written as
x+=y

7)Ternary Operators
-------------------
syntax:- condition?true_statement:else_statement

Conditional statemnets / Decision making statements
---------------------------------------------------
1) if else
----------
Syntax:-  if(condition){
	     statement
	  }
	  else{
	     statement
	  }

####### H/W ---- W.A.P to find the second largest among three numbers and arrange them in decsending order


Looping statemnet
-----------------
- To do a task repeatedly

1) while loop
-------------
syntax:-  
	variable declaration
	while(condition){
		statements
	}
	exit condition

2) for loop
------------
syntax:-
	for(variable initialization ; condition ; exit condition){
		statement
	}


#### break is used for forcefully exiting from a loop


Nested Loop
-----------
-Loop within another loop





1)  Functions
=============
-Functions are used to do a task repeatedly at different locations of a programming file.
-Variables inside a function is having block scope.
-To access the variable outside the function, we need to return the variable.
-No statement after the return will be executed, so retun statment should be the last statement of the function


-There are two parts for a function.
	1)Function definition
	2)Function call

1)Function definition:-
---------------------

-syntax:- 
	function function_name(argument1,........,argumentn){
		statements
	}

## Arguments ---> Data from outside that are need to execute the task

2)Function call:-
----------------
-Only after the function call the statements inside the function definition executes.

-syntax:-
	function_name()


==>>> Arguments (or parameters):-
     ---------------------------
A values given to a function to do a certain task is called an argument or parameters.

Functional Hoisting
-------------------
-Calling a function before the function is  defined.
-Normal functions.


2)Arrow Function
---------------
-Can be used in ES6
(-Latest verison of JavaScript is ES6)
-Functional hoisting is not possible.


Syntax:-
-------
//////////Function defintion

const variable = (arg1,arg2,.....)=>{        //// {} is only used if there is more than one statements available
	statement
}

//////////Function call

variable()


3)Predefined Functions
--------------------

- Build in functions of a particular language is called Predefined functions
eg:- console.log()
     typeOf()
     parseInt()
     Math.floor()
     Number()
     Alert()
     eval()

4)Call back functions
---------------------
-function calling another function
-Call back function will come as an argument to the another function


5)Nested function
-----------------
-Function definition inside another function.
-Closure property : Property of a parent function can be accessed inside a child function but not vice versa.


## Asynchronous functions - functions with time delay  
	eg: setTimeout(), API call


## Synchronous functions - functions without time delay

## Anonymous functions - Function without name




Data structure
--------------
- A specialised format of organizing, processing , retrieving and storing data.
- Array, stack, queue, list, linked list, tree , graph, hash....etc


Array
-----
- Unlike variables array can store more than one data(can be of any type)
-Definition: Array is a single variable which can store more than one value that are separated by commas and enclosed within a square bracket.
-In JavaScript array length is infinite

syntax:-
	arrayname =[item1, item2, .....,item1]

-stored as key: value pairs
key => index
value => items of the array

index => indicates the position of items in an array
      => its value starts form 0

length -> total number of items / memory locations
       -> starts from 1

Array methods
-------------
1)Push - To add items to a given array
	-It add items to the end of an array

2)Pop - To remove an item from an array

3)Unshift - to add items to the start of a given array

4) shift - to remove anitem from the start of an array

5) sort() - to arrange an array => (descending or ascending order)

6) flat(depth) - it changes the dimension of an array - 2D - 1D - return an array

7) map()- for -return an array of same number of elements as that of its parent

8) forEach() - same as that of 'for of' loop - return void -so that further activities(array methods) can not be executed

9) reduce() - returns a single value, eg:highest,lowest, sum, product, average...etc

10) filter() - it returns an array satisfying a specific condition.
			array.filter(variable=>condition)

11) some() - it returns true or false based on the condition applied to an array

12) find() -  it returns the first element that satisfying the condition

13) includes() - to check an item present in the array or not

14) indexOf() - to find the index of the given element in an array

15) splice() - to add and remove items at a particular position
				array.slice(index, Number of itemsto be Removed, Items to be Added)

16) slice()- method used to extract a section of an array and return a new array without modifying the original array.
			array.slice(startIndex,endIndex)
			--->> endIndex will not be included(excluded)
17) reduceRight() - method used to extract a section of an array and return a new array without modifying the original array

Different way to access array items
-----------------------------------
1) for loop
2) in - directly access the index of an array with explicitly writing the condition and increment operators.
3) of - directly acess the ites in an array


Binary search
-------------
- Binary search reduces the time delay compared to the linear search
 (Linear search - Search each elements in an array

- Array should be arranged in ascending order


 String
========
Methods
-------
1) startsWith() - checkwhether the given string starts with a particular character(Case sensitive). It returns boolean values.

2) endsWith() - checkwhether the given string ends with a particular character(Case sensitive). It returns boolean values.

3) toUpperCase() - to convert the given string into capital letter.

4) toLowerCase() - to convert the given string into small letter.

5) trim() - to remove blank space at the ends.

6) substring() - to create a substring from a given string 
			array.substring(startindex, endindex)
			- endindex is excluded

7) slice - string.slice(startindex, endindex)
	  - endindex will be excluded.
	  - accept negative values.
	  - starts from end of the string

8) split(value) - divide the given string into substring based on a particular value
		- returns an array.

9) replace(searchvalue , replacevalue) - replace a particular word/ character from a given string.
		-first maching word.

10) replaceAll(searchvalue , replacevalue) - replace all the maching words.

11) Array.from() - divide the string based on each character and returns an array


 Object
========
- object - is also used to store more than one data with more clarity
-definition - object is a single variable that can hold more than one data of different datatypes as key:value pairs that are seperated by commas and enclosed within curly brackets.

syntax:-
-------
objectname = {
	key:value,
	.........
	.........
	key n:value n
}


Object Oriented Programming ( OOPS )
------------------------------------
it is a modern programming paradigm which consider real time entity into object and class.

basic
-----
1) class - class is a blueprint which contains common features from which different objects can be created
2) object - objects are the real time entities that are created from the class.
3) reference - the memory location where the properties and methods are stored

property - is variables inside a class 
method - functions inside a class

syntax:-
-------
class classname{

//1)property

//2)method

//3) constructor(){}     ->  used to initialise values to property

}

-it is not mandatory that all the three, that is property, methods and cunstructor should always present inside the class.
- instance variables (this.variablename) - inorder to access properties inside the class.



object
------
syntax:-

const objectname = new classname()

- objects are used in order to access properties or methods outside the class.

- constructors invoke automatically when the class is created.

Pillers of OOPS
---------------
1) Inheritance - Machanism used to access the methods and properties from other class.
		- Parent class (or super class / base class)
		- Child class (or derived class / sub class)
	- classical inheritance - keyword -> extends 
	- object inheritance - keyword -> __proto__

2) Polymorphism
		poly - many
		morphism - forms
	1)Method/function overloading - methods with same names but different arguments
				      - It execute based on the number of arguments
				      - Javascript does not support Method overloading.
				      - rest operator(...) -> it returns arguments as array
	2)Method overriding - method with same name and same number of arguments
			    - the last written method
			    - Javascript supports this concept


3) Encapsulation
4) Abstraction


Exception handling
------------------
Exception - runtime error

- try-catch block is used to handle exception in javascript
- at a time any one block works, either try or catch

   try{
	//statements that can commit error
   }
   catch{
	//statement to handle error
   }
   finally{
	//statement that have to be executed in both case.
   }




------------------------------------------------------------------------------------------------------------------------------------------------------


JavaScript - Frontend
---------------------

Browser - application programme which provides an interface for user to interact with all information available in the world wide web(www)

- browser understanding language - html,css,javascript

- javascript - behaviour - html,css

- Javascript access DOM

DOM - Document Object Model
---------------------------
- created by browser
- its a tree structure of the html document.




				html
				  |
		---------------------------------------
		|				      |
	      head				     body
		|				      |
      ---------------------		-------------------------------
      |         |         | 		|	      |		      |
    meta       meta     title	       div	      h1              p
					|
					a




- BOM - Browser object model


how to use js file
------------------
1) internal
------------
	<script>
	logic
	</script>
	
- after body tag

2) external
-----------
create external file with extension as .js
- <script src='path'/> 


How to access html tags
-----------------------
1) document.getElementByTagName('tagname') - return html collection(array)
2) document.getElementById('id') - returns the tag directly
3) document.getElementByClassName('classname') - return html collection
4) document.querySelector(tag/#id/.class) - it returns first satisfying tag/id/class
5) document.querySelectorAll(tag/#id/.class) - Nodelist-Array

how to change the content in a tag
----------------------------------
-innerHTML


EVENTS - Actions that can lead to an update in DOM
------
1) click
2) change
3) submit
4) load
5) keydown



### Date - class in javascript used to get date & time from the system



Database:
---------
- Database are used to store data.
- Key : Value pair
- Both key and value should be string
- large amount of data can be stored


Browser storage : to store data
-Limited amount of data can be stored

- 1) local storage
------------------
- data will be stored permanently

operations in local storage
---------------------------
1) localstorage.setItem("key",value) - to add data to local storage.
2) localstorage.getItem("key") - to retrieve the data from local storage.
3) localstorage.removeItem("key") - to delete a data from local storage.


##### JSON.stringify - used to convert a 
##### JSON.parse - used to 

- 2) session storage
--------------------
-not a permanent storage
- remove when the session expires



API - Application Programming Interface
---------------------------------------
-used to communicate b\w two application available in internet.

types of API
-------------
1) public API - globally available
2) private API
3) partner API
4) composite API


http - HyperText Transfer Protocol
-----------------------------------

https , ftp , smtp , tcp , udp


http methods 
--------------
1) get    - to retrieve data.
2) post   - to add data // to the databese
3) put    - to update the data
4) delete - to remove data


request have two parts 
-----------------------
1) header - content-type and authentication keys
2) body   - holds data to be shared


JSON - JavaScript Object Notation
----------------------------------
- common formate for data sharing.
 
  syntax:

        {
			"key":"value"
		}

  rules :
		.data should be shared as key:value pairs
        .both key:value should be string
		.each key:value pairs should be separeted by commas and enclosed withIn curly brackets - object
		.if the shared data is array then enclosed in square brackets



response status
-----------------

1)1xx series - information      // 100 series
2)2xx series - success
3)3xx series - redirection
4)4xx series - client side error []
5)5xx series - server side error []





refer
---------
SOAP architecture, RPC architecture

API testing tool
----------------
- Thunder cleint - extension of vs code
- Postman - real tool for testing API

how to create an API
-------------------------
1) AJAX - Asynchronous JavaScript XML
   - XMLHTTPREQUEST class used
   - open() - API connnection establishes
   - send() - used to send the request
   -readystates - is the property inside the class which value wil change from 1-4
                -this change can be seen using onreadystatechange function
	        -response will only be obtained when the value of readystate reaches 4
  -responseText - is a property in the class where we get the data

2) FETCH - promise class
         - to resolve Asynchronous function
	     - ES6 - js version
	     request states
	     --------------
	     - resolve   .then()
	     - reject    .catch()
	     - pending   not resolved & not rejected


3) ASYNC AWAIT
		 - it makes the promise wasier to written
		 - .then() is used only once
		 - can store data into a variable
		 - async - makes the function return promise (function inside which the api call fn is written)
		 - await - makes the function pause the execution and wait for a resolved promise before it continues. (before the api call fn)
		 - it avoida all call back hell.
		 - await should always written inside the aside function

Q . How JavaScript handles Asynchronous & Synchronous function being a single thread programming language

